LamLisp vs. Scheme R7RS - compatibility matrix

Type predicates
boolean? bytevector?
char? eof-object?
null? number?
pair? port?
procedure? string?
symbol? vector?

3.4 Proper tail recursion


quote, quasiquote, unquote, unquote-splicing
' ` , ,@
Arithmetic operators + - * /
Numeric comparison < <= = >= >
=>

#!fold-case
#!no-fold-case

Common numeric functions
abs
sin cos tan
asin acos atan


Association lists
assoc assq assv


and
angle
append
apply

#b
backquote
base
begin
binary-port?
binding
binding
body
boolean=?
boolean?
bound
byte
bytevector
bytevector-append
bytevector-copy
bytevector-copy!
bytevector-length
bytevector-u8-ref
bytevector-u8-set!
bytevector?
bytevectors
caaaar
caaadr
caaar
caadar
caaddr
caadr
caar
cadaar
cadadr
cadar
caddar
cadddr
caddr
cadr
call
call
call-with-current-continuation
call-with-input-file
call-with-output-file
call-with-port
call-with-values
call/cc
car
car-internal
case
case-lambda
cdaaar
cdaadr
cdaar
cdadar
cdaddr
cdadr
cdar
cddaar
cddadr
cddar
cdddar
cddddr
cdddr
cddr
cdr
ceiling
char->integer
Index
char-alphabetic?
char-ci<=?
char-ci<?
char-ci=?
char-ci>=?
char-ci>?
char-downcase
char-foldcase
char-lower-case?
char-numeric?
char-ready?
char-upcase
char-upper-case?
char-whitespace?
char<=?
char<?
char=?
char>=?
char>?
char?
close-input-port
close-output-port
close-port
comma
command
command-line
comment
complex?
cond
cond-expand
cons
constant
continuation
cos
current
current-error-port
current-input-port
current-jiffy
current-output-port
current-second
#d
define
define-library
define-record-type
define-syntax
define-values
definition
delay
delay-force
delete-file
denominator
digit-value
display
do
dotted
dynamic
dynamic
dynamic-wind
#e
else
emergency-exit
empty
environment
environment
eof-object
eof-object?
eq?
equal?
equivalence
eqv?
error
error-object-irritants
error-object-message
error-object?
escape
escape
eval
even?
exact
exact
exact-integer-sqrt
exact-integer?
exact?
exactness
except
exception
exit
exp
export
expt
#f
false
features
fields
file-error?
file-exists?
finite?
floor
floor-quotient
floor-remainder
floor/
flush-output-port
for-each
force
fresh
gcd
get-environment-variable
86
get-environment-variables
get-output-bytevector
get-output-string
global
guard
hygienic
#i
identifier
if
imag-part
immutable
implementation
implementation
import
improper
include
include-ci
include-library-declarations
inexact
inexact
inexact?
infinite?
initial
input-port-open?
input-port?
integer->char
integer?
interaction-environment
internal
internal
irritants
jiffies
jiffies-per-second
keyword
lambda
lazy
lcm
length
let
let*
let*-values
let-syntax
let-values
letrec
letrec*
letrec-syntax
libraries
list
list->string
list->vector
list-copy
list-ref
list-set!
list-tail
list?
load
location
log
macro
macro
macro
macro
magnitude
make-bytevector
make-list
make-parameter
make-polar
make-promise
make-rectangular
make-string
make-vector
map
max
member
memq
memv
min
modulo
mutable
mutation
nan?
negative?
newline
newly
nil
not
null-environment
null?
number
number->string
number?
numerator
numerical
#o
object
odd?
only
open-binary-input-file
open-binary-output-file
open-input-bytevector
open-input-file
open-input-string
open-output-bytevector
open-output-file
Index
open-output-string
or
output-port-open?
output-port?
pair
pair?
parameter
parameterize
peek-char
peek-u8
polar
port
port?
positive?
predicate
predicates
prefix
procedure
procedure
procedure?
promise
promise?
proper
quasiquote
quote
quotient
raise
raise-continuable
rational?
rationalize
read
read-bytevector
read-bytevector!
read-char
read-error?
read-line
read-string
read-u8
real-part
real?
record
record-type
records
rectangular
referentially
region
remainder
rename
repl
reverse
round
scheme-report-environment
set!
set-car!
set-cdr!
setcar
simplest
sin
sqrt
square
string
string->list
string->number
string->symbol
string->utf8
string->vector
string-append
string-ci<=?
string-ci<?
string-ci=?
string-ci>=?
string-ci>?
string-copy
string-copy!
string-downcase
string-fill!
string-foldcase
string-for-each
string-length
string-map
string-ref
string-set!
string-upcase
string<=?
string<?
string=?
string>=?
string>?
string?
substring
symbol->string
symbol=?
symbol?
syntactic
syntax
syntax-error
syntax-rules
#t
tail
tan
textual-port?
thunk
token
true
truncate
truncate-quotient
88
truncate-remainder
truncate/
type
u8-ready?
unbound
unless
unquote
unquote-splicing
unspecified
utf8->string
valid
values
variable
variable
vector
vector->list
vector->string
vector-append
vector-copy
vector-copy!
vector-fill!
vector-for-each
vector-length
vector-map
vector-ref
vector-set!
vector?
when
whitespace
with-exception-handler
with-input-from-file
with-output-to-file
write
write-bytevector
write-char
write-shared
write-simple
write-string
write-u8
#x
zero?